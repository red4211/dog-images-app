{"version":3,"sources":["logo.svg","SuggestionsList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SuggestionsList","props","showSuggestions","searchText","filteredSuggestions","length","list","map","suggestion","index","className","activeSuggestion","key","onClick","hClick","Search","state","handleChange","e","targetName","target","name","targetValue","value","suggestions","filter","elem","toLowerCase","indexOf","setState","handleSubmit","preventDefault","test","outerHandler","textContent","onKeyDown","keyCode","onSubmit","this","type","placeholder","onChange","Component","App","dogArray","allBreeds","text","fetch","then","res","json","status","console","log","message","res2","json2","resBreeds","breedsArray","push","dogList","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3127e6f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nfunction SuggestionsList(props) {\r\n  if (\r\n    props.showSuggestions &&\r\n    props.searchText &&\r\n    props.filteredSuggestions.length > 0\r\n  ) {\r\n    const list = props.filteredSuggestions.map((suggestion, index) => {\r\n      let className;\r\n      if (index === props.activeSuggestion) {\r\n        className = \"suggestion-active\";\r\n      }\r\n\r\n      return (\r\n        <li className={className} key={suggestion} onClick={props.hClick}>\r\n          {suggestion}\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return <ul className=\"suggestions\">{list}</ul>;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\nexport default SuggestionsList;\r\n","import React, { Component } from \"react\";\r\nimport SuggestionsList from \"./SuggestionsList\";\r\nclass Search extends Component {\r\n\tstate = {\r\n\t\tactiveSuggestion: 0,\r\n\t\tfilteredSuggestions: [],\r\n\t\tshowSuggestions: false,\r\n\t\tsearchText: \"\"\r\n\t};\r\n\r\n\thandleChange = e => {\r\n\t\tconst targetName = e.target.name;\r\n\t\tconst targetValue = e.target.value;\r\n\t\tconst { suggestions } = this.props;\r\n\t\tlet filteredSuggestions = \"\";\r\n\t\tif (targetValue.length > 1) {\r\n\t\t\tfilteredSuggestions = suggestions.filter(\r\n\t\t\t\telem =>\r\n\t\t\t\t\telem.toLowerCase().indexOf(targetValue.toLowerCase()) > -1\r\n\t\t\t);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tactiveSuggestion: 0,\r\n\t\t\t\tshowSuggestions: true,\r\n\t\t\t\tfilteredSuggestions: filteredSuggestions,\r\n\t\t\t\t[targetName]: targetValue\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\t[targetName]: targetValue,\r\n\t\t\t\tshowSuggestions: false\r\n\t\t\t});\r\n\t\t}\r\n\t}; //\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tconst test = this.state.searchText;\r\n\t\tthis.props.outerHandler(test);\r\n\t};\r\n\r\n\tonClick = e => {\r\n\t\tthis.setState({\r\n\t\t\tactiveSuggestion: 0,\r\n\t\t\tfilteredSuggestions: [],\r\n\t\t\tshowSuggestions: false,\r\n\t\t\tsearchText: e.target.textContent\r\n\t\t});\r\n\t};\r\n\r\n\tonKeyDown = e => {\r\n\t\tconst { activeSuggestion, filteredSuggestions } = this.state;\r\n\t\tif (e.keyCode === 13 && this.state.showSuggestions) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tactiveSuggestion: 0,\r\n\t\t\t\tshowSuggestions: false,\r\n\t\t\t\tsearchText: filteredSuggestions[activeSuggestion]\r\n\t\t\t});\r\n\t\t} else if (e.keyCode === 38) {\r\n\t\t\t//up arrow\r\n\t\t\tif (activeSuggestion === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({ activeSuggestion: activeSuggestion - 1 });\r\n\t\t}\r\n\t\t//down arrow\r\n\t\telse if (e.keyCode === 40) {\r\n\t\t\tif (activeSuggestion + 1 === filteredSuggestions.length) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({ activeSuggestion: activeSuggestion + 1 });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit} className=\"search-form\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"search-inp\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Dog breeds\"\r\n\t\t\t\t\tname=\"searchText\"\r\n\t\t\t\t\tvalue={this.state.searchText}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\tonKeyDown={this.onKeyDown}\r\n\t\t\t\t/>\r\n\t\t\t\t<SuggestionsList\r\n\t\t\t\t\tshowSuggestions={this.state.showSuggestions}\r\n\t\t\t\t\tsearchText={this.state.searchText}\r\n\t\t\t\t\tfilteredSuggestions={this.state.filteredSuggestions}\r\n\t\t\t\t\tactiveSuggestion={this.state.activeSuggestion}\r\n\t\t\t\t\thClick={this.onClick}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Search from \"./Search\";\n\nclass App extends Component {\n\tstate = {\n\t\tdogArray: [],\n\t\tsearchText: \"\",\n\t\tallBreeds: []\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://dog.ceo/api/breeds/image/random/12\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({ dogArray: json.message });\n\t\t\t})\n\t\t\t.then(\n\t\t\t\tfetch(\"https://dog.ceo/api/breeds/list/all\")\n\t\t\t\t\t.then(res2 => res2.json())\n\t\t\t\t\t.then(json2 => {\n\t\t\t\t\t\tvar resBreeds = json2.message;\n\t\t\t\t\t\tvar breedsArray = [];\n\n\t\t\t\t\t\tfor (var key in resBreeds) {\n\t\t\t\t\t\t\tbreedsArray.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setState({ allBreeds: breedsArray });\n\t\t\t\t\t})\n\t\t\t);\n\t}\n\n\touterHandler = text => {\n\t\tfetch(\"https://dog.ceo/api/breed/\" + text + \"/images/random/12\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tif (json.status === \"error\") {\n\t\t\t\t\tconsole.log(\"error\");\n\t\t\t\t} else if (json.status === \"success\") {\n\t\t\t\t\tthis.setState({ dogArray: json.message });\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\trender() {\n\t\tconst dogList = this.state.dogArray.map((elem, index) => {\n\t\t\treturn (\n\t\t\t\t<li key={index}>\n\t\t\t\t\t<img src={elem} alt=\"doggo\" />{\" \"}\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Search\n\t\t\t\t\touterHandler={this.outerHandler}\n\t\t\t\t\tsuggestions={this.state.allBreeds}\n\t\t\t\t/>\n\t\t\t\t<ul className=\"dogs-list\">{dogList} </ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}